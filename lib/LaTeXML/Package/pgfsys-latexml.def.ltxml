# -*- CPERL -*-
# /=======================================================\ #
# |  pgf to svg driver - Implementation for LaTeXML       | #
# |=======================================================| #
# | Part of LaTeXML : http://dlmf.nist.gov/LaTeXML/       | #
# | Copyright (c) 2011 arXMLiv group                      | #
# | Released under the GNU Public License                 | #
# | Released to the Public Domain                         | #
# |=======================================================| #
# | Author: Silviu Vlad Oprea                             | #
# | E-mail: s.oprea@jacobs-university.de                  | #
# \=======================================================/ #

package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use Image::Magick;

#=====================================================================
# Utilities
sub addToCount {
  my ($reg, $value, $option) = @_;
  $option = 'local' if !$option;
  AssignValue($reg => (LookupValue($reg) || 0) + $value, $option); }

#====================================================================#
#= 0. Environment specific stuff ====================================#
#====================================================================#

DefPrimitive('\lxSVG@installcommands', sub {
    # Local definitions.
    Let(T_CS('\hbox'),  T_CS('\lxSVG@hbox'));
    Let(T_CS('\vbox'),  T_CS('\lxSVG@vbox'));
    Let(T_CS('\lower'), T_CS('\lxSVG@lower'));
    Let(T_CS('\raise'), T_CS('\lxSVG@raise'));
    Let(T_CS('\hskip'), T_CS('\lxSVG@hskip'));
    return; });

# Redefine to disappear from UnTeX, since it appears a zillion times...
DefPrimitive('\lx@inpgf@ignorespaces SkipSpaces', sub { (); });
# Order might matter here
DefMacro('\lxSVG@picture', sub {
    Let('\ignorespaces', '\lx@inpgf@ignorespaces');    # Use local defn
    AssignValue('pgf_SVGpath' => '');
    (T_CS('\begingroup'), T_CS('\lxSVG@installcommands')); });

DefMacro('\endlxSVG@picture', sub { T_CS('\endgroup'); });

DefConstructor('\lxSVG@pgfsys@insertpicture{}',
  '<ltx:picture>' .
    '<svg:svg version="1.1" width="#pxwidth" height="#pxheight" '
    . 'viewBox="#minx #miny #pxwidth #pxheight" id="#id">'
    . '<svg:g transform="matrix(1 0 0 -1 0 #flipnmove)">'
    . '#1'
    . '</svg:g>'
    . '</svg:svg>'
    . '</ltx:picture>',
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    my $minx   = LookupValue('\pgf@picminx')->ptValue;
    my $miny   = LookupValue('\pgf@picminy')->ptValue;
    my $width  = LookupValue('\pgf@picmaxx');
    my $height = LookupValue('\pgf@picmaxy');
    my $w      = List::Util::max($width->ptValue, 1);
    my $h      = List::Util::max($height->ptValue, 1);
    $whatsit->setProperty(minx      => $minx);
    $whatsit->setProperty(miny      => $miny);
    $whatsit->setProperty(width     => $width);
    $whatsit->setProperty(height    => $height);
    $whatsit->setProperty(depth     => Dimension(0));
    $whatsit->setProperty(pxwidth   => $w);
    $whatsit->setProperty(pxheight  => $h);
    $whatsit->setProperty(flipnmove => $h + 2 * $miny);
    # or tikz macro (see corescopes)
## Careful about ids... do we even need them set from here?
##    $whatsit->setProperty(id =>
##        'svgpic' . (LookupValue('\pgf@picture@serial@count')->valueOf));
    return; });

DefParameterType('SVGMoveableBox', sub {
    my ($gullet) = @_;
    $gullet->skipSpaces;
    my ($box, @stuff) = $STATE->getStomach->invokeToken($gullet->readXToken(1));
    Error(":expected:<box>  A <svghbox> was supposed to be here, got "
        . Stringify($box))
      unless $box && $box->isa('LaTeXML::Whatsit')
      && ($box->getDefinition->getCSName =~ /^(\\lxSVG\@hbox||)$/);
    $box; });

# BRM: added this
# Check whether a svg:foreignObject is open,
# but don't check beyond an svg:svg node, in case we're nested.
sub foreignObjectCheck {
  my ($doc) = @_;
  my $node = $doc->getNode;
  while ($node) {
    my $n = $doc->getNodeQName($node);
    return undef if $n eq 'svg:svg';
    return $node if $n eq 'svg:foreignObject';
    $node = $node->parentNode; } }

DefConstructor('\lxSVG@raise Dimension SVGMoveableBox', sub {
    my ($doc, $dim, $box) = @_;
    if (foreignObjectCheck($doc)) {
      $doc->openElement('ltx:text',
        yoffset      => $dim->multiply(-1)->ptValue . 'px',
        _noautoclose => '1');
      $doc->absorb($box);
      $doc->closeElement('ltx:text');
} else { $doc->absorb($box); } });

DefConstructor('\lxSVG@lower Dimension SVGMoveableBox', sub {
    my ($doc, $dim, $box) = @_;
    if (foreignObjectCheck($doc)) {
      $doc->openElement('ltx:text',
        yoffset      => $dim->ptValue . 'px',
        _noautoclose => '1');
      $doc->absorb($box);
      $doc->closeElement('ltx:text');
} else { $doc->absorb($box); } });

DefConstructor('\lxSVG@hskip Glue', sub {
    my ($doc, $skip) = @_;
    if (foreignObjectCheck($doc)) {
      $doc->openElement('ltx:text',
        'xoffset'      => $skip->ptValue . 'px',
        '_noautoclose' => '0'); } });

# Like regular \hbox, \vbox, but we don't want any extra element around it.
DefConstructor('\lxSVG@hbox BoxSpecification HBoxContents', '#2',
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    my $spec = $whatsit->getArg(1);
    my $box  = $whatsit->getArg(2);
    if (my $w = $$spec{to}) {
      $whatsit->setWidth($w); }
    elsif (my $s = $$spec{spread}) {
      $whatsit->setWidth($box->getWidth->add($s)); }
    return; });

DefConstructor('\lxSVG@vbox BoxSpecification VBoxContents', '#2',
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    my $spec = $whatsit->getArg(1);
    my $box  = $whatsit->getArg(2);
    if (my $h = $$spec{to}) {
      $whatsit->setHeight($h); }
    elsif (my $s = $$spec{spread}) {
      $whatsit->setHeight($box->getHeight->add($s)); }
    return; });

#=====================================================================#
# 1. Beginning and ending a stream ===================================#
#=====================================================================#
DefMacro('\pgfsys@typesetpicturebox{}',
  '\advance\pgf@picmaxy by-\pgf@picminy\relax%
   \advance\pgf@picmaxx by-\pgf@picminx\relax%
   \ht#1=\pgf@picmaxy%
   \wd#1=\pgf@picmaxx%
   \dp#1=0pt%
   \leavevmode%\message{width: \the\pgf@picmaxx, height:\the\pgf@picmaxy}%%
   \lxSVG@pgfsys@insertpicture{\box#1}%');

DefMacro('\pgfsys@beginpicture', '');
DefMacro('\pgfsys@endpicture',   '');

# Note that this is overly generous with svg:foreignObject.
# It is used to recursively contain svg:svg elements
# also simple strings end up there (they _could_ have exotic latexml attributes...)
DefConstructor('\lxSVG@pgfsys@foreignObject{Dimension}{Dimension}{Dimension}{}', sub {
    my ($doc, $w, $h, $d, $box, %prop) = @_;
    $doc->openElement('svg:g',
      id        => 'fobj' . $prop{fobj_num} . 'g',
      transform => 'matrix(1 0 0 -1 0 ' . $h->ptValue . ')');
    my $node = $doc->getNode;
    while ($node && !$node->getAttribute('stroke')) { $node = $node->parentNode; }
    my $sw = $doc->openElement('svg:switch');
    $doc->openElement('svg:foreignObject',
      width  => $w->ptValue,
      height => $h->add($d)->ptValue, class => 'ltx_foreignobject',
      id     => 'fobj' . $prop{fobj_num}, color => $node->getAttribute('stroke'));
    my $p = $doc->openElement('ltx:p',
      xmlns => 'http://dlmf.nist.gov/LaTeXML',
      #		      class=>'fobjc',
      'xml:id' => 'fobj' . $prop{fobj_num} . 'c');
    $doc->absorb($box);
    $doc->maybeCloseElement('ltx:text');
    $doc->closeElement('ltx:p');
    $doc->closeElement('svg:foreignObject');
    $doc->closeElement('svg:switch');
    $doc->closeElement('svg:g');
    # Check the children of the inserted ltx:p
    # We should at least try to denest svg ?
    # If svg:switch/svg:foreignObject/ltx:p/ltx:picture/svg:svg/svg:g
    # should be replaced by just the final svg:g !!! (?)

    my @ch = element_nodes($p);
    if ((scalar(@ch) == 1) && ($doc->getNodeQName($ch[0]) eq 'ltx:picture')) {
      my @gch = element_nodes($ch[0]);
      if ((scalar(@gch) == 1) && ($doc->getNodeQName($gch[0]) eq 'svg:svg')) {
        my ($g) = element_nodes($gch[0]);
        $doc->replaceNode($sw, $g);
      } }
    # Could conceivably be simplifying ltx:text ???
  },
  afterDigest => sub {
    my ($doc, $whatsit) = @_;
    $whatsit->setProperty(fobj_num => LookupValue('svg_fobjnum') || 0); },
  beforeDigest => sub {
    addToCount('svg_fobjnum', 1, 'global');
    return; });

DefMacro('\pgfsys@hbox{Number}', sub {
    my $box   = 'box' . $_[1]->valueOf;
    my $stuff = LookupValue($box);
    return if !$stuff;
    #  my $dim = $stuff->getDimensions;
    #  Invocation(T_CS('\lxSVG@pgfsys@foreignObject'),
    #	     Dimension($dim->{width}.'pt'), Dimension($dim->{height}.'pt'),
    #	     Dimension($dim->{depth}.'pt'), Invocation(T_CS('\box'),$_[1])); });
    #  my($w,$h,$d)=$stuff->getDimensions;
####  my($w,$h,$d)=(Dimension('0pt'),Dimension('0pt'),Dimension('0pt'));

##  my $s = $stuff->toString;
##  my($w,$h,$d)=(Dimension(10*length($s).'pt'),Dimension('10pt'),Dimension('2pt'));
    my $w = $stuff->getWidth;
    my $h = $stuff->getHeight;
    my $d = $stuff->getDepth;
    Invocation(T_CS('\lxSVG@pgfsys@foreignObject'), $w, $h, $d,
      Invocation(T_CS('\box'), $_[1])); });

#DefConstructor('\maybepicture', sub {
#  my ($doc) = @_;
#  if ($doc->isOpen('svg:foreignObject')) {
#    $doc->openElement('svg:svg');
#  return; }
#});
#RawTeX('\expandafter\def\expandafter\node\expandafter{\expandafter\maybepicture\node');
#====================================================================#
#= 2. Path construction =============================================#
#====================================================================#

#=====================================================================
# Helpers

# Adding an element to the current SVG path
sub addToSVGPath {
  my ($operation, @points) = @_;
  my $newPath = join(' ', $operation, map($_->ptValue, @points));
  if (my $currentPath = LookupValue('pgf_SVGpath')) {
    AssignValue(pgf_SVGpath => $currentPath . ' ' . $newPath);
  } else {
    AssignValue(pgf_SVGpath => $newPath);
  }
  return; }

# sub updateBB {
#   my ($x, $y) = map($_->ptValue, @_);
#   if (LookupValue('Boolean:pgf@relevantforpicturesize') == 1) {
#     AssignValue(picminx => List::Util::min(LookupValue('picminx'), $x), 'global');
#     AssignValue(picminy => List::Util::min(LookupValue('picminy'), $y), 'global');
#     AssignValue(picmaxx => List::Util::max(LookupValue('picmaxx'), $x), 'global');
#     AssignValue(picmaxy => List::Util::max(LookupValue('picmaxy'), $y), 'global');
#   } }

# Drawing a horizontal line of given dimension
DefPrimitive('\lxSVG@pgfsys@hline{Dimension}', sub {
    addToSVGPath('h', $_[1]); return; });

# Drawing a vertical line of given dimension
DefPrimitive('\lxSVG@pgfsys@vline{Dimension}', sub {
    addToSVGPath('v', $_[1]); return; });

#=====================================================================
# Implementation

# Start a path at a specific point (x,y) or to move the current point of the
# current path to (x,yp) without drawing anything upon stroking (the current
# path is 'interrupted'
DefPrimitive('\pgfsys@moveto{Dimension}{Dimension}', sub {
    addToSVGPath('M', @_[1 .. $#_]); return; });

# Continue the current path to (#1,#2) with a line.
DefMacro('\pgfsys@lineto{Dimension}{Dimension}', sub {
    addToSVGPath('L', @_[1 .. $#_]); return; });

# Continue the current path with a bezier curver to (#5,#6). The
# control points of the curve are at (#1,#2) and (#3,#4).
DefPrimitive('\pgfsys@curveto{Dimension}{Dimension}{Dimension}'
    . '{Dimension}{Dimension}{Dimension}', sub {
    addToSVGPath('C', @_[1 .. $#_]); return; });

# Append a rectangle to the current path whose lower left corner is at
# (#1,#2) and whose width/height is given by (#3,#4).
DefMacro('\pgfsys@rect{}{}{}{}', sub {
    my ($gullet, $x, $y, $hmove, $vmove) = @_;
    (Invocation('\pgfsys@moveto', $x, $y),
      Invocation('\lxSVG@pgfsys@hline', $hmove),
      Invocation('\lxSVG@pgfsys@vline', $vmove),
      Invocation('\lxSVG@pgfsys@hline', Dimension('-' . ToString($hmove))),
      T_CS('\pgfsys@closepath')); });

# Close the current path. This results in joining the current point of
# the path with the point specified by the last moveto
# operation.
DefMacro('\pgfsys@closepath', sub { addToSVGPath('Z'); return; });

#=====================================================================#
#= 3. Canvas transformation ==========================================#
#=====================================================================#

# Perform a concatenation of the low-level current transformation
# matrix with the matrix given by the values #1 to #6. The
# transformation matrix is a transformation on a homogeneous
# 2D-coordinate system.
DefMacro('\pgfsys@transformcm{}{}{}{}{}{}', sub {
    addToCount('pgf_gcount', 1, 'global');
    Invocation('\pgfsysprotocol@literal', Invocation('\pgfsys@transformcm@', @_[1 .. $#_])); });

DefConstructor('\pgfsys@transformcm@{Float}{Float}{Float}{Float}{Dimension}{Dimension}',
  '<svg:g transform="matrix(#c1 #c2 #c3 #c4 #x #y)">',
  properties => {
    c1 => sub { $_[1]->valueOf; },
    c2 => sub { $_[2]->valueOf; },
    c3 => sub { $_[3]->valueOf; },
    c4 => sub { $_[4]->valueOf; },
    x  => sub { $_[5]->ptValue; },
    y  => sub { $_[6]->ptValue; } });
##  beforeDigest => sub { addToCount('pgf_gcount', 1, 'global'); });

#=====================================================================#
#= 4. Stroking, filling, and clipping ================================#
#=====================================================================#

#======================================================================
DefMacro('\lxSVG@pgfsys@drawpath{}', sub {
    my ($gullet, $arg) = @_;
    if ((LookupValue('pgf_clipnext') || 0) == 0) {
      Invocation('\lxSVG@pgfsys@drawunclippedpath', $arg); }
    else {
      Invocation('\lxSVG@pgfsys@drawclippedpath', $arg);
} });

#----------------------------------------------------------------------

DefMacro('\lxSVG@pgfsys@drawunclippedpath{}', sub {
    my $svgpath = LookupValue('pgf_SVGpath') || '';
    AssignValue(pgf_SVGpath => '');
    Invocation('\pgfsysprotocol@literal',
      Invocation('\lxSVG@pgfsys@drawunclippedpath@', $svgpath, $_[1])); });

DefMacro('\lxSVG@pgfsys@drawclippedpath{}', sub {
    my $svgpath = LookupValue('pgf_SVGpath') || '';
    AssignValue(pgf_SVGpath  => '');
    AssignValue(pgf_clipnext => 0);
    addToCount('pgf_gcount',   1, 'global');
    addToCount('pgf_objcount', 1, 'global');
    Invocation('\pgfsysprotocol@literal',
      Invocation('\lxSVG@pgfsys@drawclippedpath@', $svgpath, $_[1])) });

#----------------------------------------------------------------------

DefConstructor('\lxSVG@pgfsys@drawunclippedpath@{}{}',
  '<svg:path d="#1" style="#2" />');

DefConstructor('\lxSVG@pgfsys@drawclippedpath@{}{}',
  '<svg:clipPath id="pgfcp#objcount">'
    . '<svg:path id="pgfpath#objcount" d="#1" />'
    . '</svg:clipPath>'
    . '<svg:use xlink:href="#pgfpath#objcount" style="#2" />'
    . '<svg:g clip-path="url(#pgfcp#objcount)">',
  properties => {
    objcount => sub { LookupValue('pgf_objcount'); },
    pgfcp    => '#pgfcp',
    pgfpath  => '#pgfpath' },
  #  beforeDigest=>sub { #return; });
  #    addToCount('pgf_objcount', 1, 'global') });
  #    addToCount('pgf_gcount', 1, 'global'); });
);

#======================================================================
DefPrimitive('\lxSVG@pgfsys@discardpathnoclip', sub {
    AssignValue(pgf_SVGpath => '');
    return; });

DefMacro('\lxSVG@pgfsys@discardpathclip', sub {
    my $svgpath = LookupValue('pgf_SVGpath') || '';
    AssignValue(pgf_SVGpath  => '');
    AssignValue(pgf_clipnext => 0);
    addToCount('pgf_gcount',   1, 'global');
    addToCount('pgf_objcount', 1, 'global');
    Invocation('\pgfsysprotocol@literal',
      Invocation('\lxSVG@pgfsys@discardpathclip@', $svgpath)); });

#----------------------------------------------------------------------

DefConstructor('\lxSVG@pgfsys@discardpathclip@{}',
  '<svg:clipPath id="pgfcp#objcount">'
    . '<svg:path d="#1" />'
    . '</svg:clipPath>'
    . '<svg:g clip-path="url(#pgfcp#objcount)">',
  properties => {
    objcount => sub { LookupValue('pgf_objcount'); },
    pgfcp => '#pgfcp' },
  #  beforeDigest => sub {
  #    addToCount('pgf_objcount', 1, 'global');
  #    addToCount('pgf_gcount', 1, 'global');
  #    return; });
);

#======================================================================
# Implementation

DefMacro('\pgfsys@stroke',     '\lxSVG@pgfsys@drawpath{fill:none}');
DefMacro('\pgfsys@fill',       '\lxSVG@pgfsys@drawpath{stroke:none}');
DefMacro('\pgfsys@fillstroke', '\lxSVG@pgfsys@drawpath{}');

DefMacro('\pgfsys@clipnext', sub { AssignValue(pgf_clipnext => 1); });

DefMacro('\pgfsys@discardpath', sub {
    if ((LookupValue('pgf_clipnext') || 0) == 1) {
      return T_CS('\lxSVG@pgfsys@discardpathclip'); }
    else {
      return T_CS('\lxSVG@pgfsys@discardpathnoclip');
} });

#=====================================================================#
#= 5. Graphic state option ===========================================#
#=====================================================================#

#=====================================================================
# LL
# Open an <svg:g>, with some sort of options
# keeping track of how many have been opened.
DefMacro('\lxSVG@pgfsys@begingroup{}', sub {
    addToCount('pgf_gcount', 1, 'global');
    (T_CS('\pgfsysprotocol@literal'), T_BEGIN,
      T_CS('\lxSVG@pgfsys@begingroup@'), T_BEGIN, $_[1]->unlist, T_END, T_END); });

DefConstructor('\lxSVG@pgfsys@begingroup@ RequiredKeyVals',
  '<svg:g %&KeyVals(#1)>');

DefMacro('\lxSVG@pgfsys@endgroup', sub {
    addToCount('pgf_gcount', -1, 'global');
    Invocation('\pgfsysprotocol@literal',
      T_CS('\lxSVG@pgfsys@endgroup@')); });

DefConstructor('\lxSVG@pgfsys@endgroup@',
  '</svg:g>');

#=====================================================================
# Implementation

DefMacro('\pgfsys@setlinewidth{}',  '\lxSVG@pgfsys@begingroup{stroke-width={#1}}');
DefMacro('\pgfsys@buttcap',         '\lxSVG@pgfsys@begingroup{stroke-linecap=butt}');
DefMacro('\pgfsys@roundcap',        '\lxSVG@pgfsys@begingroup{stroke-linecap=round}');
DefMacro('\pgfsys@rectcap',         '\lxSVG@pgfsys@begingroup{stroke-linecap=rect}');
DefMacro('\pgfsys@miterjoin',       '\lxSVG@pgfsys@begingroup{stroke-linejoin=miter}');
DefMacro('\pgfsys@setmiterlimit{}', '\lxSVG@pgfsys@begingroup{stroke-miterlimit={#1}}');
DefMacro('\pgfsys@roundjoin',       '\lxSVG@pgfsys@begingroup{stroke-linejoin=round}');
DefMacro('\pgfsys@beveljoin',       '\lxSVG@pgfsys@begingroup{stroke-linejoin=bevel}');

DefMacro('\pgfsys@setdash{}{}', '\lxSVG@pgfsys@begingroup{'
    . 'stroke-dasharray={\ifx.#1.none\else#1\fi},'
    . 'stroke-dashoffset={#2}}');
DefMacro('\pgfsys@eoruletrue',  '\lxSVG@pgfsys@begingroup{fill-rule=evenodd}');
DefMacro('\pgfsys@eorulefalse', '\lxSVG@pgfsys@begingroup{fill-rule=nonzero}');

#=====================================================================#
#= 6. Color ==========================================================#
#=====================================================================#

#=====================================================================
# Helpers

sub svgColorRgb {
  my ($r, $g, $b) = map(ToString($_), @_);
  return 'rgb(' . ($r * 100) . '%,' . ($g * 100) . '%,' . ($b * 100) . '%)'; }

sub svgColorCmyk {
  my ($c, $m, $y, $k) = map(ToString($_), @_);
  return 'rgb(' . ((1 - $k) * $c + $k - 1) * (-100) . '%,' .
    ((1 - $k) * $m + $k - 1) * (-100) . '%,' .
    ((1 - $k) * $y + $k - 1) * (-100) . '%)'; }

sub svgColorCmy {
  my ($c, $m, $y) = map(ToString($_), @_);
  return 'rgb(' . ((1 - $c) * 100) . '%,' .
    ((1 - $m) * 100) . '%,' .
    ((1 - $y) * 100) . '%)'; }

sub svgColorGray {
  my ($g) = map(ToString($_), @_);
  return 'rgb(' . ($g * 100) . '%,' .
    ($g * 100) . '%,' .
    ($g * 100) . '%)'; }

# DefMacro('\lxSVG@pgfsys@setcolor{}{}',
#   sub {
#     my ($gullet, $attribute, $value) = @_;
# ## REALLY ??? Only if pgfpicture ?
#     if ((LookupValue('Boolean:pgfpicture') || 0) == 1) {
#       return (T_CS('\lxSVG@pgfsys@begingroup'),
#         Invocation('\lxSVG@pgfsys@setgroupattr', $attribute, $value));
#     }
#     return;
#   });

DefMacro('\lxSVG@pgfsys@setcolor{}{}', '\ifpgfpicture\lxSVG@pgfsys@begingroup{#1={#2}}');

# Need to defer until after color/xcolor are loaded!
AtBeginDocument('\def\XC@mcolor{\pgfsetcolor{.}}');

#=====================================================================
# Implementation

DefMacro('\pgfsys@color@rgb{}{}{}', sub {
    my ($stomach, $r, $g, $b) = @_;
    (Invocation('\pgfsys@color@rgb@stroke', $r, $g, $b),
      Invocation('\pgfsys@color@rgb@fill', $r, $g, $b)); });

DefMacro('\pgfsys@color@rgb@stroke{}{}{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'stroke',
      svgColorRgb($_[1], $_[2], $_[3])); });

DefMacro('\pgfsys@color@rgb@fill{}{}{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'fill',
      svgColorRgb($_[1], $_[2], $_[3])); });

DefMacro('\pgfsys@color@cmyk@stroke{}{}{}{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'stroke',
      svgColorCmyk($_[1], $_[2], $_[3], $_[4])); });

DefMacro('\pgfsys@color@cmyk@fill{}{}{}{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'fill',
      svgColorCmyk($_[1], $_[2], $_[3], $_[4])); });

DefMacro('\pgfsys@color@cmy@stroke{}{}{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'stroke',
      svgColorCmy($_[1], $_[2], $_[3])); });

DefMacro('\pgfsys@color@cmy@fill{}{}{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'fill',
      svgColorCmy($_[1], $_[2], $_[3])); });

DefMacro('\pgfsys@color@gray@stroke{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'stroke',
      svgColorGray($_[1])); });

DefMacro('\pgfsys@color@gray@fill{}', sub {
    Invocation('\lxSVG@pgfsys@setcolor', 'fill',
      svgColorGray($_[1])); });

#====================================================================#
#= 7. Pattern =======================================================#
#====================================================================#

#=====================================================================
# SLL
DefConstructor('\lxSVG@pgfsys@coloredpattern@{}{Dimension}{Dimension}{}',
  '<svg:defs><svg:pattern ' .
    'id ="pgfpat#1" ' .
    'patternUnits="userSpaceOnUse" ' .
    'width="#x_step" height="#y_step">' .
    '#4' .
    '</svg:pattern></svg:defs>',
  properties => {
    x_step => sub { $_[2]->ptValue; },
    y_step => sub { $_[3]->ptValue; } });

DefConstructor('\lxSVG@pgfsys@uncoloredpattern@{}{Dimension}{Dimension}{}',
  '<svg:defs>' .
    '<svg:pattern '
    . 'id ="pgfpat#1" '
    . 'patternUnits="userSpaceOnUse" '
    . 'width="#x_step" height="#y_step">'
    . '<svg:symbol id="pgfsym#1">#4</svg:symbol>'
    . '</svg:pattern></svg:defs>',
  properties => {
    x_step => sub { $_[2]->ptValue; },
    y_step => sub { $_[3]->ptValue; } });

DefConstructor('\pgfsys@setpatternuncolored@{}{}{}{}',
  '<svg:defs><svg:pattern id="pgfupat#objcount" xlink:href="#pgfpat#1">'
    . '<svg:g stroke="#color" fill="#color">'
    . '<svg:use xlink:href="#pgfsym#1"/>'
    . '</svg:g>'
    . '</svg:pattern></svg:defs>'
    . '<svg:g fill="url(#pgfupat#objcount)">',
  properties => {
    pgfsym   => '#pgfsym',
    pgfpat   => '#pgfpat',
    pgfupat  => '#pgfupat',
    objcount => sub { LookupValue('pgf_objcount') || 0; },
    color    => sub { svgColorRgb($_[2], $_[3], $_[4]); } },
  #  beforeDigest => sub { #return; });
  #    addToCount('pgf_gcount', 1, 'global');
  #    addToCount('pgf_objcount', 1, 'global'); });
);

#=====================================================================
# LL

DefMacro('\lxSVG@pgfsys@coloredpattern{}{}{}{}', sub {
    Invocation('\pgfsysprotocol@literal',
      Invocation('\lxSVG@pgfsys@coloredpattern@', @_[1 .. $#_])); });

DefMacro('\lxSVG@pgfsys@uncoloredpattern{}{}{}{}', sub {
    Invocation('\pgfsysprotocol@literal',
      Invocation('\lxSVG@pgfsys@uncoloredpattern@', @_[1 .. $#_])); });

#=====================================================================
# Implementation

# \pgfsys@declarepattern{name}{x1}{y1}{x2}{y2}{x step}{y step}{code}{ﬂag}
DefMacro('\pgfsys@declarepattern{}'
    . '{Dimension}{Dimension}{Dimension}{Dimension}{Dimension}{Dimension}'
    . '{}{Number}', sub {
    my ($gullet, $name, $x1, $y1, $x2, $y2, $x_step, $y_step, $code, $flag) = @_;
    AssignValue('\pgf@xa' => $x1);     AssignValue('\pgf@ya' => $y1);
    AssignValue('\pgf@xb' => $x2);     AssignValue('\pgf@yb' => $y2);
    AssignValue('\pgf@xc' => $x_step); AssignValue('\pgf@yc' => $y_step);
    if ($flag->valueOf == 1) {
      return Invocation('\lxSVG@pgfsys@coloredpattern',
        $name, $x_step, $y_step, $code);
    } else {
      return Invocation('\lxSVG@pgfsys@uncoloredpattern',
        $name, $x_step, $y_step, $code);
    }
    return; });

DefMacro('\pgfsys@setpatternuncolored{}{}{}{}', sub {
    addToCount('pgf_gcount',   1, 'global');
    addToCount('pgf_objcount', 1, 'global');
    Invocation('\pgfsysprotocol@literal',
      Invocation('\pgfsys@setpatternuncolored@', @_[1 .. $#_])); });

DefMacro('\pgfsys@setpatterncolored{}',
  '\lxSVG@pgfsys@setcolor{fill}{url(\#pgfpat#1)}');

#====================================================================#
#= 8. Scoping =======================================================#
#====================================================================#

# Saves the current graphic state on a graphic state stack. All
# changes to the graphic state parameters mentioned for \pgfsys@stroke
# and \pgfsys@fill will be local to the current graphic state and will
# the old values will be restored after endscope is used.
DefPrimitive('\lxSVG@internal@savegcount', sub {
    AssignValue(pgf_gcount_save => LookupValue('pgf_gcount') || 0);
    AssignValue(pgf_gcount => 0, 'global');
});

DefPrimitive('\lxSVG@internal@restoregcount', sub {
    AssignValue(pgf_gcount => LookupValue('pgf_gcount_save') || 0, 'global');
});

DefMacro('\pgfsys@beginscope', sub {
    (T_CS('\lxSVG@internal@savegcount'), T_CS('\begingroup'),
      T_CS('\lxSVG@pgfsys@begingroup'), T_BEGIN, T_END); });

DefMacro('\pgfsys@endscope', sub {
    my @toks = ();
    push(@toks, T_CS('\lxSVG@pgfsys@endgroup'))
      foreach (1 .. LookupValue('pgf_gcount'));
    (@toks, T_CS('\endgroup'), T_CS('\lxSVG@internal@restoregcount')); });

#=====================================================================#
#= 9. Image ==========================================================#
#=====================================================================#

#=====================================================================
# Helpers

# \lxSVG@pgfsys@insertimage{width}{height}{path}{title}
DefConstructor('\lxSVG@pgfsys@insertimage{}{}{}{}',
  '<svg:g transform="matrix(1 0 0 -1 0 #2)">'
    . '<svg:image x="#x" y="#y" width="#1" height="#2" '
    . 'preserveAspectRatio="none" xlink:href="#3" alt="#4">'
    . '<svg:title>#4</svg:title>'
    . '</svg:image>'
    . '</svg:g>',
  properties => {
    x => sub {
      my ($stomach, $width, $height) = @_;
      my $prevmaxx = (LookupValue('pgf_lastForeignObjX') || 0);
      my $newmaxx = $prevmaxx + ToString($width);
      AssignValue(pgf_lastForeignObjX => $newmaxx, 'global');
      if ($prevmaxx < LookupValue('\pgf@picminx')->ptValue) {
        AssignValue('\pgf@picminx' => Dimension($prevmaxx . 'pt'), 'global');
      }
      if ($newmaxx > LookupValue('\pgf@picmaxx')->ptValue) {
        AssignValue('\pgf@picmaxx' => Dimension($newmaxx . 'pt'), 'global');
      }
      return $prevmaxx; },
    y => sub {
      my ($stomach, $width, $height) = @_;
      my $prevmaxy = (LookupValue('pgf_lastForeignObjY') || 0);
      my $newmaxy = $prevmaxy + ToString($height);
      # AssignValue(pgf_lastForeignObjY => $newmaxy, 'global'); # if needed
      if ($prevmaxy < LookupValue('\pgf@picminy')->ptValue) {
        AssignValue('\pgf@picminy' => Dimension($prevmaxy . 'pt'), 'global');
      }
      if ($newmaxy > LookupValue('\pgf@picmaxy')->ptValue) {
        AssignValue('\pgf@picmaxy' => Dimension($newmaxy . 'pt'), 'global');
      }
      return $prevmaxy; } });

RawTeX('\newbox\lxSVG@imgbox');
#=====================================================================
# Implementation

our $svg_image_types = [qw(png gif jpg jpeg eps ps ai pdf svg)];
DefPrimitive('\pgfsys@defineimage',
  sub {
    my $request = ToString(Expand(T_CS('\pgf@filename')));
    $request =~ s/^\s+//; $request =~ s/\s+$//;

    my $path = pathname_find($request, types => $svg_image_types,
      paths => LookupValue('GRAPHICSPATHS'));
    my $title = $path;
    if (defined $path) {
      my $magick = Image::Magick->new;
      if (my $retval = $magick->Read($path)) {
        Error('I/O' . $path . " Failed to read image $path: $retval"); }
      my $width  = $magick->Get('width')  || 1;    # real width
      my $height = $magick->Get('height') || 1;    # read height
      my $w = $width;     # specified width
      my $h = $height;    # specified height
                          #my $x = (LookupValue('pgf_lastForeignObjX') || 0); # x of tl corner
                          #my $y = 0; # y coordinate of top left corner
      my $wspec = !(xEquals(T_CS('\pgf@imagewidth'), T_CS('\pgfutil@empty')));
      my $hspec = !(xEquals(T_CS('\pgf@imageheight'), T_CS('\pgfutil@empty')));

      if ($wspec) {
        $w = Dimension(ToString(Expand(T_CS('\pgf@imagewidth'))))->ptValue;
        $h *= $w / $width unless $hspec;    # scale to preserve ratio
      }
      if ($hspec) {
        $h = Dimension(ToString(Expand(T_CS('\pgf@imageheight'))))->ptValue;
        $w *= $h / $height unless $wspec;    # scale to preserve ratio
      }
      # DefMacro('\pgf@image',
      #  	'\setbox\lxSVG@imgbox=\hbox{%
      #       \includegraphics[height='.$h.'pt,width='.$w.'pt]{\pgf@filename}}%
      #     \wd\lxSVG@imgbox='.$w.'pt\relax\ht\lxSVG@imgbox='.$h.'pt\relax\dp\lxSVG@imgbox=0pt\relax%
      #     \pgfqbox\lxSVG@imgbox');
##      DefMacro('\pgf@image', ''); # will do a constructor which sets its width somehow
###      DefMacro('\pgf@image',Invocation(T_CS('\@@foreign@image'),$path,$w,$h));
      DefMacro('\pgf@image', Invocation(T_CS('\@@foreign@image'), $path, Dimension($w . 'pt'), Dimension($h . 'pt')));
    } else {
      Error("File " . $title . " not found.");
      DefMacro('\pgf@image', '');
    }
    return; });

##DefConstructor('\@@foreign@image Semiverbatim {}{}', sub {
DefConstructor('\@@foreign@image Semiverbatim {Dimension}{Dimension}', sub {
    my ($doc, $path, $width, $height) = @_;
    my $foreign = foreignObjectCheck($doc);
    #  $height= ToString($height);
    #  $width= ToString($width);
    $doc->openElement('svg:foreignObject', width => $width, height => $height)
      unless $foreign;
    $doc->insertElement('ltx:graphics', undef, graphic => $path,
      options => "width=" . $width->ptValue . ",height=" . $height->ptValue);
    $doc->closeElement('svg:foreignObject') unless $foreign; },
  afterDigest => sub {
    my ($stomach, $whatsit) = @_;
    # Set these properties, so it knows its size!
    $whatsit->setProperty(width  => $whatsit->getArg(2));
    $whatsit->setProperty(height => $whatsit->getArg(3));
    $whatsit->setProperty(depth  => Dimension(0));
    return; });

#=====================================================================#
#= 10. Shading =======================================================#
#=====================================================================#

#=====================================================================
# Helpers

DefMacro('\lxSVG@pgfsys@sh@create', sub {
    T_CS('\lxSVG@pgfsys@sh@intervals'), Expand(T_CS('\pgf@sys@shading@ranges')),
      T_BEGIN,
      T_BEGIN, T_CS('\pgf@sys@shading@end@pos'), T_END,
      T_BEGIN, T_CS('\pgf@sys@shading@end@pos'), T_END,
      T_BEGIN, T_CS('\pgf@sys@shading@end@rgb'), T_END,
      T_BEGIN, T_CS('\pgf@sys@shading@end@rgb'), T_END,
      T_END, T_BEGIN, T_END });

DefPrimitive('\lxSVG@pgfsys@sh@color{Float}{Float}{Float}', sub {
    AssignValue(pgf_sh_color => svgColorRgb(map($_->valueOf, @_[1 .. $#_])));
    return; });

DefPrimitive('\lxSVG@pgfsys@sh@interval@{Dimension}', sub {
    my $endpos = Dimension(ToString Expand T_CS '\pgf@sys@shading@end@pos');
    my $offset = $_[1]->ptValue / $endpos->ptValue;
    AssignValue(pgf_sh => (LookupValue('pgf_sh') || '')
        . '<svg:stop offset="' . $offset . '" '
        . 'stop-color="' . LookupValue('pgf_sh_color') . '" />');
    return; });

DefMacro('\lxSVG@pgfsys@sh@interval{}{}{}{}', sub {
    (T_CS('\lxSVG@pgfsys@sh@color'), $_[3],
      Invocation(T_CS('\lxSVG@pgfsys@sh@interval@'), $_[1])); });

DefMacro('\lxSVG@pgfsys@sh@intervals{}', sub {
    my ($gullet, $point) = @_;
    $point = Expand($point);
    return if !ToString($point);
    (T_CS('\lxSVG@pgfsys@sh@interval'), $point,
      T_CS('\lxSVG@pgfsys@sh@intervals')); });

DefPrimitive('\lxSVG@pgfsys@sh@defstripes{}{Number}', sub {
    my ($stomach, $name, $flag) = @_;
    my $stops = LookupValue('pgf_sh'); AssignValue(pgf_sh => '');
    my $x     = LookupValue('\pgf@x')->ptValue;
    my $y     = LookupValue('\pgf@y')->ptValue;
    DefPrimitiveI('\@pgfshading' . $name->ToString . '!', undef, sub {
        my $objcount = (LookupValue('pgf_objcount') || 0) + 1;
        AssignValue(pgf_objcount => $objcount, 'global');
        DefConstructor('\lxSVG@pgfsys@sh@defs',
          '<svg:defs><svg:linearGradient id="pgfsh' . $objcount . '" '
            . ($flag->valueOf == 1 ? 'gradientTransform="rotate(90)"' : '') . '>'
            . $stops
            . '</svg:linearGradient></svg:defs>');
        DefConstructor('\lxSVG@pgfsys@sh',
          '<svg:rect width="' . $x . '" height="' . $y . '" '
            . 'style="fill:url(#pgfsh);stroke:none" />',
          properties => { pgfsh => '#pgfsh' . $objcount });
        DefMacro('\lxSVG@pgfsys@pos', sub { Invocation(T_CS('\pgfpoint'), $x, $y); });
        return; }, scope => 'global');
    return; });

DefPrimitive('\lxSVG@pgfsys@sh@defcircles{}', sub {
    my ($stomach, $name) = @_;
    my $stops  = LookupValue('pgf_sh'); AssignValue(pgf_sh => '');
    my $endpos = Dimension(ToString Expand T_CS '\pgf@sys@shading@end@pos')->ptValue;
    my $x      = LookupValue('\pgf@x')->ptValue * 8 / ($endpos * 16) + 0.5;
    my $y      = LookupValue('\pgf@y')->ptValue * 8 / ($endpos * 16) + 0.5;
    DefPrimitiveI('\@pgfshading' . $name->ToString . '!', undef, sub {
        my $objcount = (LookupValue('pgf_objcount') || 0) + 1;
        AssignValue(pgf_objcount => $objcount, 'global');
        DefConstructor('\lxSVG@pgfsys@sh@defs',
          '<svg:defs><svg:radialGradient id="pgfsh' . $objcount . '" '
            . 'fx="' . $x . '" fy="' . $y . '">'
            . $stops
            . '</svg:radialGradient></svg:defs>');
        DefConstructor('\lxSVG@pgfsys@sh',
          '<svg:circle cx="' . $endpos . '" cy="' . $endpos . '" r="' . $endpos . '" '
            . 'style="fill:url(#pgfsh);stroke:none" />',
          properties => { pgfsh => '#pgfsh' . $objcount });
        DefMacro('\lxSVG@pgfsys@pos', sub {
            Invocation(T_CS('\pgfpoint'), 2 * $endpos, 2 * $endpos) });
        return; }, scope => 'global');
    return; });

DefConstructor('\lxSVG@pgfsys@sh@insert{Dimension}{Dimension}{}',
  '<svg:g transform="translate(#x #y)">#3</svg:g>',
  properties => {
    x => sub { $_[1]->ptValue; },
    y => sub { $_[2]->ptValue; } });

DefMacro('\lxSVG@process{Dimension}{Dimension}',
  '\ifdim\pgf@picmaxx<#1\global\pgf@picmaxx=#1\fi'
    . '\ifdim\pgf@picmaxy<#2\global\pgf@picmaxy=#2\fi'
    . '\ifdim\pgf@picminx>#1\global\pgf@picminx=#1\fi'
    . '\ifdim\pgf@picminy>#2\global\pgf@picminy=#2\fi');

#=====================================================================
# Implementation

DefMacro('\pgfsys@shadinginsidepgfpicture{}',
  '\message{Using shading \string#1}' .
    '#1\lxSVG@pgfsys@sh@defs%
  \pgf@process{\lxSVG@pgfsys@pos}%
  \pgf@x=-.5\pgf@x\relax\pgf@y=-.5\pgf@y\relax%
%  \lxSVG@process{\pgf@x}{\pgf@y}%
%  \pgf@x=-1\pgf@x\relax\pgf@y=-1\pgf@y\relax%
%  \lxSVG@process{\pgf@x}{\pgf@y}%
  \lxSVG@pgfsys@sh@insert{\pgf@x}{\pgf@y}{\lxSVG@pgfsys@sh}');

DefMacro('\pgfsys@shadingoutsidepgfpicture{}',
  '\begingroup\lxSVG@installcommands%
    #1%
    \setbox\pgfpic=\hbox to0pt{%
      \lxSVG@pgfsys@sh@defs%
      \lxSVG@pgfsys@sh%
    }%
    \pgf@process{\lxSVG@pgfsys@pos}%
    \pgf@picminx=0pt%
    \pgf@picminy=0pt%
    \pgf@picmaxx=\pgf@x%
    \pgf@picmaxy=\pgf@y%
    \pgfsys@typesetpicturebox{\pgfpic}%
  \endgroup'
);

DefMacro('\pgfsys@horishading{}{Dimension}{}', sub {
    my ($gullet, $name, $height, $specs) = @_;
    (Invocation(T_CS('\pgf@parsefunc'), $specs),
      T_CS('\lxSVG@pgfsys@sh@create'),
      Invocation(T_CS('\pgf@process'), Invocation(T_CS('\pgfpoint'),
          T_CS('\pgf@sys@shading@end@pos'), $height)),
      Invocation(T_CS('\lxSVG@pgfsys@sh@defstripes'),
        $name, Number(0))); });

DefMacro('\pgfsys@vertshading{}{Dimension}{}', sub {
    my ($gullet, $name, $height, $specs) = @_;
    (Invocation(T_CS('\pgf@parsefunc'), $specs),
      T_CS('\lxSVG@pgfsys@sh@create'),
      Invocation(T_CS('\pgf@process'), Invocation(T_CS('\pgfpoint'),
          T_CS('\pgf@sys@shading@end@pos'), $height)),
      Invocation(T_CS('\lxSVG@pgfsys@sh@defstripes'), $name, Number(1))); });

DefMacro('\pgfsys@radialshading{}{}{}', sub {
    my ($gullet, $name, $point, $specs) = @_;
    (Invocation(T_CS('\pgf@parsefunc'), $specs),
      T_CS('\lxSVG@pgfsys@sh@create'),
      Invocation(T_CS('\pgf@process'),                $point),
      Invocation(T_CS('\lxSVG@pgfsys@sh@defcircles'), $name)); });

# Wow... postscript function...
DefMacro('\pgfsys@functionalshading{}{}{}', sub {
    my ($gullet, $name, $ll, $ur, $psfct) = @_;
    Let(T_CS('\lxSVG@pgfsys@sh@defs'), T_CS('\relax'));
    Let(T_CS('\lxSVG@pgfsys@sh'),      T_CS('\relax'));
    Let(T_CS('\lxSVG@pgfsys@pos'),     T_CS('\relax')); });

#=====================================================================#
#= 11. Transparency ==================================================#
#=====================================================================#

DefMacro('\pgfsys@stroke@opacity{}',           '\lxSVG@pgfsys@begingroup{stroke-opacity={#1}}');
DefMacro('\pgfsys@fill@opacity{}',             '\lxSVG@pgfsys@begingroup{fill-opacity={#1}}');
DefMacro('\pgfsys@fadingfrombox{}{}',          '');
DefMacro('\pgfsys@usefading{}{}{}{}{}{}{}',    '');
DefMacro('\pgfsys@transparencygroupfrombox{}', '');
DefMacro('\pgfsys@definemask',                 '');

#=====================================================================#
#= 12. Reusable objects ==============================================#
#=====================================================================#

DefConstructor('\pgfsys@invoke{}', '#1');
DefMacro('\pgfsys@markposition{}', '');

#=====================================================================#
#= 13. Invisibility ==================================================#
#=====================================================================#

RawTeX('\def\pgfsys@begininvisible#1\pgfsys@endinvisible{}');    # well...

#=====================================================================#
#= 14. The protocol subsystem ========================================#
#=====================================================================#

# # Adds the literal text to the current protocol, after it has been
# # \edef-ed. This command will always protocol.
# DefPrimitive('\pgfsysprotocol@literalbuffered{}', sub {});

# # First calls \pgfsysprotocol@literalbuffered on literal text . Then,
# # if protocolling is currently switched off, the literal text is passed
# # on to pgfsys@invoke, which just inserts it into the document.
# DefMacro('\pgfsysprotocol@literal{}', '');

# # Stores the current protocol in macro name for later use.
# DefPrimitive('\pgfsysprotocol@getcurrentprotocol{}', sub {});

# # Sets the current protocol to macro name.
# DefMacro('\pgfsysprotocol@setcurrentprotocol{}', sub{});

# # Inserts the text stored in the current protocol into the file.
# DefMacro('\pgfsysprotocol@invokecurrentprotocol', sub{});

# # First inserts the current protocol, then sets the current protocol to
# # the empty string.
# DefMacro('\pgfsysprotocol@flushcurrentprotocol', sub{});

#=====================================================================#
#= 15. Overflowing ===================================================#
#=====================================================================#

#=====================================================================
# Dealing with quick commands

# Coordinates
# Let(T_CS('\pgfqpoint'),T_CS('\pgfpoint'));
# Let(T_CS('\pgfqpointxy'),T_CS('\pgfpointxy'));
# Let(T_CS('\pgfqpointxyz'),T_CS('\pgfpointxyz'));
# Let(T_CS('\pgfqpointscale'),T_CS('\pgfpointscale'));

# Path construction

1;
