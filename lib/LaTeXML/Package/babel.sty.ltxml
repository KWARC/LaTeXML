# -*- CPERL -*-
# /=====================================================================\ #
# |  babel                                                              | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Thanks to the arXMLiv group for initial implementation              | #
# |    http://arxmliv.kwarc.info/                                       | #
# | Released to the Public Domain                                       | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;

# NOTE that in principle, babel can be loaded multiple times,
# and the "processOptions" part SHOULD be re-executed!
# HOWEVER!!!!
# some packages test for whether babel is loaded????
# AssignValue('babel.sty_loaded'=>0,'global');
# So how do multiple loads work?

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# babel.def only needs to be loaded ONCE.
# but isn't loaded until a language is specified...
sub inputBabelLanguage {
  my ($language) = @_;
  RequirePackage('babel', type => 'def');
  InputDefinitions($language, type => 'ldf');
  return; }

DeclareOption('acadian',    sub { inputBabelLanguage('frenchb'); });
DeclareOption('albanian',   sub { inputBabelLanguage('albanian'); });
DeclareOption('afrikaans',  sub { inputBabelLanguage('dutch'); });
DeclareOption('american',   sub { inputBabelLanguage('english'); });
DeclareOption('australian', sub { inputBabelLanguage('english'); });
DeclareOption('austrian',   sub { inputBabelLanguage('germanb'); });
DeclareOption('bahasa',     sub { inputBabelLanguage('bahasai'); });
DeclareOption('indonesian', sub { inputBabelLanguage('bahasai'); });
DeclareOption('indon',      sub { inputBabelLanguage('bahasai'); });
DeclareOption('bahasai',    sub { inputBabelLanguage('bahasai'); });
DeclareOption('malay',      sub { inputBabelLanguage('bahasam'); });
DeclareOption('meyalu',     sub { inputBabelLanguage('bahasam'); });
DeclareOption('bahasam',    sub { inputBabelLanguage('bahasam'); });
DeclareOption('basque',     sub { inputBabelLanguage('basque'); });
DeclareOption('brazil',     sub { inputBabelLanguage('portuges'); });
DeclareOption('brazilian',  sub { inputBabelLanguage('portuges'); });
DeclareOption('breton',     sub { inputBabelLanguage('breton'); });
DeclareOption('british',    sub { inputBabelLanguage('english'); });
DeclareOption('bulgarian',  sub { inputBabelLanguage('bulgarian'); });
DeclareOption('canadian',   sub { inputBabelLanguage('english'); });
DeclareOption('canadien',   sub { inputBabelLanguage('frenchb'); });
DeclareOption('catalan',    sub { inputBabelLanguage('catalan'); });
DeclareOption('croatian',   sub { inputBabelLanguage('croatian'); });
DeclareOption('czech',      sub { inputBabelLanguage('czech'); });
DeclareOption('danish',     sub { inputBabelLanguage('danish'); });
DeclareOption('dutch',      sub { inputBabelLanguage('dutch'); });
DeclareOption('english',    sub { inputBabelLanguage('english'); });
DeclareOption('esperanto',  sub { inputBabelLanguage('esperanto'); });
DeclareOption('estonian',   sub { inputBabelLanguage('estonian'); });
DeclareOption('finnish',    sub { inputBabelLanguage('finnish'); });
DeclareOption('francais',   sub { inputBabelLanguage('frenchb'); });
DeclareOption('frenchb',    sub { inputBabelLanguage('frenchb'); });
DeclareOption('french',     sub { inputBabelLanguage('frenchb'); });
DeclareOption('galician',   sub { inputBabelLanguage('galician'); });
DeclareOption('german',     sub { inputBabelLanguage('germanb'); });
DeclareOption('germanb',    sub { inputBabelLanguage('germanb'); });
DeclareOption('greek',      sub { inputBabelLanguage('greek'); });
DeclareOption('polutonikogreek', sub { inputBabelLanguage('greek');
    RawTeX('\languageattribute{greek}{polutoniko}'); return; });
DeclareOption('hebrew', sub {    #   \input{rlbabel.def}%
    inputBabelLanguage('hebrew'); });
DeclareOption('hungarian',    sub { inputBabelLanguage('magyar'); });
DeclareOption('icelandic',    sub { inputBabelLanguage('icelandic'); });
DeclareOption('interlingua',  sub { inputBabelLanguage('interlingua'); });
DeclareOption('irish',        sub { inputBabelLanguage('irish'); });
DeclareOption('italian',      sub { inputBabelLanguage('italian'); });
DeclareOption('latin',        sub { inputBabelLanguage('latin'); });
DeclareOption('lowersorbian', sub { inputBabelLanguage('lsorbian'); });
DeclareOption('magyar',       sub { inputBabelLanguage('magyar'); });
DeclareOption('naustrian',    sub { inputBabelLanguage('ngermanb'); });
DeclareOption('newzealand',   sub { inputBabelLanguage('english'); });
DeclareOption('ngerman',      sub { inputBabelLanguage('ngermanb'); });
DeclareOption('norsk',        sub { inputBabelLanguage('norsk'); });
DeclareOption('samin',        sub { inputBabelLanguage('samin'); });
DeclareOption('nynorsk',      sub { inputBabelLanguage('norsk'); });
DeclareOption('polish',       sub { inputBabelLanguage('polish'); });
DeclareOption('portuges',     sub { inputBabelLanguage('portuges'); });
DeclareOption('portuguese',   sub { inputBabelLanguage('portuges'); });
DeclareOption('romanian',     sub { inputBabelLanguage('romanian'); });
DeclareOption('russian',      sub { inputBabelLanguage('russianb'); });
DeclareOption('scottish',     sub { inputBabelLanguage('scottish'); });
DeclareOption('serbian',      sub { inputBabelLanguage('serbian'); });
DeclareOption('slovak',       sub { inputBabelLanguage('slovak'); });
DeclareOption('slovene',      sub { inputBabelLanguage('slovene'); });
DeclareOption('spanish',      sub { inputBabelLanguage('spanish'); });
DeclareOption('swedish',      sub { inputBabelLanguage('swedish'); });
DeclareOption('turkish',      sub { inputBabelLanguage('turkish'); });
DeclareOption('ukrainian',    sub { inputBabelLanguage('ukraineb'); });
DeclareOption('uppersorbian', sub { inputBabelLanguage('usorbian'); });
DeclareOption('welsh',        sub { inputBabelLanguage('welsh'); });
DeclareOption('UKenglish',    sub { inputBabelLanguage('english'); });
DeclareOption('USenglish',    sub { inputBabelLanguage('english'); });
DeclareOption(undef, sub {
    inputBabelLanguage(ToString(Digest(T_CS('\CurrentOption')))); });

# \InputIfFileExists{bblopts.cfg}{%
DeclareOption('activeacute',          undef);
DeclareOption('activegrave',          undef);
DeclareOption('KeepShorthandsActive', undef);

ProcessOptions(inorder => 1);
if (!LookupDefinition(T_CS('\bbl@main@language'))) {
  Error('expected', 'language', undef,
    "No language option specified with babel."); }
AtBeginDocument('\expandafter\selectlanguage\expandafter{\bbl@main@language}');
# Now hopefully, \bbl@main@language is defined?

# \def\substitutefontfamily#1#2#3{%
# \@onlypreamble\substitutefontfamily

# \AtBeginDocument{%
#    if package ifthen was loaded, bable redefines \ifthenelse to account for different pageref(?)
#    if package varioref was loaded, redefine \@@vpageref to account for ???
#    if package hhline was loaded, redefine something...

#\DeclareRobustCommand{\FOREIGNLANGUAGE}[1]{%
#  \lowercase{\foreignlanguage{#1}}}

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1;

